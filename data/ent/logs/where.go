// Code generated by ent, DO NOT EDIT.

package logs

import (
	"formulago/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUpdatedAt, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldType, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldMethod, v))
}

// API applies equality check predicate on the "api" field. It's identical to APIEQ.
func API(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldAPI, v))
}

// Success applies equality check predicate on the "success" field. It's identical to SuccessEQ.
func Success(v bool) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldSuccess, v))
}

// ReqContent applies equality check predicate on the "req_content" field. It's identical to ReqContentEQ.
func ReqContent(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldReqContent, v))
}

// RespContent applies equality check predicate on the "resp_content" field. It's identical to RespContentEQ.
func RespContent(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldRespContent, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldIP, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUserAgent, v))
}

// Operator applies equality check predicate on the "operator" field. It's identical to OperatorEQ.
func Operator(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldOperator, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v int) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldType, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldMethod, v))
}

// APIEQ applies the EQ predicate on the "api" field.
func APIEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldAPI, v))
}

// APINEQ applies the NEQ predicate on the "api" field.
func APINEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldAPI, v))
}

// APIIn applies the In predicate on the "api" field.
func APIIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldAPI, vs...))
}

// APINotIn applies the NotIn predicate on the "api" field.
func APINotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldAPI, vs...))
}

// APIGT applies the GT predicate on the "api" field.
func APIGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldAPI, v))
}

// APIGTE applies the GTE predicate on the "api" field.
func APIGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldAPI, v))
}

// APILT applies the LT predicate on the "api" field.
func APILT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldAPI, v))
}

// APILTE applies the LTE predicate on the "api" field.
func APILTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldAPI, v))
}

// APIContains applies the Contains predicate on the "api" field.
func APIContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldAPI, v))
}

// APIHasPrefix applies the HasPrefix predicate on the "api" field.
func APIHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldAPI, v))
}

// APIHasSuffix applies the HasSuffix predicate on the "api" field.
func APIHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldAPI, v))
}

// APIEqualFold applies the EqualFold predicate on the "api" field.
func APIEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldAPI, v))
}

// APIContainsFold applies the ContainsFold predicate on the "api" field.
func APIContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldAPI, v))
}

// SuccessEQ applies the EQ predicate on the "success" field.
func SuccessEQ(v bool) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldSuccess, v))
}

// SuccessNEQ applies the NEQ predicate on the "success" field.
func SuccessNEQ(v bool) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldSuccess, v))
}

// ReqContentEQ applies the EQ predicate on the "req_content" field.
func ReqContentEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldReqContent, v))
}

// ReqContentNEQ applies the NEQ predicate on the "req_content" field.
func ReqContentNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldReqContent, v))
}

// ReqContentIn applies the In predicate on the "req_content" field.
func ReqContentIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldReqContent, vs...))
}

// ReqContentNotIn applies the NotIn predicate on the "req_content" field.
func ReqContentNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldReqContent, vs...))
}

// ReqContentGT applies the GT predicate on the "req_content" field.
func ReqContentGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldReqContent, v))
}

// ReqContentGTE applies the GTE predicate on the "req_content" field.
func ReqContentGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldReqContent, v))
}

// ReqContentLT applies the LT predicate on the "req_content" field.
func ReqContentLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldReqContent, v))
}

// ReqContentLTE applies the LTE predicate on the "req_content" field.
func ReqContentLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldReqContent, v))
}

// ReqContentContains applies the Contains predicate on the "req_content" field.
func ReqContentContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldReqContent, v))
}

// ReqContentHasPrefix applies the HasPrefix predicate on the "req_content" field.
func ReqContentHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldReqContent, v))
}

// ReqContentHasSuffix applies the HasSuffix predicate on the "req_content" field.
func ReqContentHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldReqContent, v))
}

// ReqContentIsNil applies the IsNil predicate on the "req_content" field.
func ReqContentIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldReqContent))
}

// ReqContentNotNil applies the NotNil predicate on the "req_content" field.
func ReqContentNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldReqContent))
}

// ReqContentEqualFold applies the EqualFold predicate on the "req_content" field.
func ReqContentEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldReqContent, v))
}

// ReqContentContainsFold applies the ContainsFold predicate on the "req_content" field.
func ReqContentContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldReqContent, v))
}

// RespContentEQ applies the EQ predicate on the "resp_content" field.
func RespContentEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldRespContent, v))
}

// RespContentNEQ applies the NEQ predicate on the "resp_content" field.
func RespContentNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldRespContent, v))
}

// RespContentIn applies the In predicate on the "resp_content" field.
func RespContentIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldRespContent, vs...))
}

// RespContentNotIn applies the NotIn predicate on the "resp_content" field.
func RespContentNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldRespContent, vs...))
}

// RespContentGT applies the GT predicate on the "resp_content" field.
func RespContentGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldRespContent, v))
}

// RespContentGTE applies the GTE predicate on the "resp_content" field.
func RespContentGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldRespContent, v))
}

// RespContentLT applies the LT predicate on the "resp_content" field.
func RespContentLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldRespContent, v))
}

// RespContentLTE applies the LTE predicate on the "resp_content" field.
func RespContentLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldRespContent, v))
}

// RespContentContains applies the Contains predicate on the "resp_content" field.
func RespContentContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldRespContent, v))
}

// RespContentHasPrefix applies the HasPrefix predicate on the "resp_content" field.
func RespContentHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldRespContent, v))
}

// RespContentHasSuffix applies the HasSuffix predicate on the "resp_content" field.
func RespContentHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldRespContent, v))
}

// RespContentIsNil applies the IsNil predicate on the "resp_content" field.
func RespContentIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldRespContent))
}

// RespContentNotNil applies the NotNil predicate on the "resp_content" field.
func RespContentNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldRespContent))
}

// RespContentEqualFold applies the EqualFold predicate on the "resp_content" field.
func RespContentEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldRespContent, v))
}

// RespContentContainsFold applies the ContainsFold predicate on the "resp_content" field.
func RespContentContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldRespContent, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldIP, v))
}

// IPIsNil applies the IsNil predicate on the "ip" field.
func IPIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldIP))
}

// IPNotNil applies the NotNil predicate on the "ip" field.
func IPNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldIP))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldIP, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldUserAgent, v))
}

// OperatorEQ applies the EQ predicate on the "operator" field.
func OperatorEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldOperator, v))
}

// OperatorNEQ applies the NEQ predicate on the "operator" field.
func OperatorNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldOperator, v))
}

// OperatorIn applies the In predicate on the "operator" field.
func OperatorIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldOperator, vs...))
}

// OperatorNotIn applies the NotIn predicate on the "operator" field.
func OperatorNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldOperator, vs...))
}

// OperatorGT applies the GT predicate on the "operator" field.
func OperatorGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldOperator, v))
}

// OperatorGTE applies the GTE predicate on the "operator" field.
func OperatorGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldOperator, v))
}

// OperatorLT applies the LT predicate on the "operator" field.
func OperatorLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldOperator, v))
}

// OperatorLTE applies the LTE predicate on the "operator" field.
func OperatorLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldOperator, v))
}

// OperatorContains applies the Contains predicate on the "operator" field.
func OperatorContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldOperator, v))
}

// OperatorHasPrefix applies the HasPrefix predicate on the "operator" field.
func OperatorHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldOperator, v))
}

// OperatorHasSuffix applies the HasSuffix predicate on the "operator" field.
func OperatorHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldOperator, v))
}

// OperatorIsNil applies the IsNil predicate on the "operator" field.
func OperatorIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldOperator))
}

// OperatorNotNil applies the NotNil predicate on the "operator" field.
func OperatorNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldOperator))
}

// OperatorEqualFold applies the EqualFold predicate on the "operator" field.
func OperatorEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldOperator, v))
}

// OperatorContainsFold applies the ContainsFold predicate on the "operator" field.
func OperatorContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldOperator, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v int) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v int) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...int) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...int) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v int) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v int) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v int) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v int) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldTime, v))
}

// TimeIsNil applies the IsNil predicate on the "time" field.
func TimeIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldTime))
}

// TimeNotNil applies the NotNil predicate on the "time" field.
func TimeNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Logs) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Logs) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Logs) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		p(s.Not())
	})
}
